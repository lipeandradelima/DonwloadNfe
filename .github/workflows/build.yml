# .github/workflows/release.yml

name: Criar Release e Binários

# 1. Gatilho (Trigger) do Workflow
# Este workflow será executado sempre que uma nova tag no formato v*.*.* (ex: v1.0.0) for enviada (push) ao repositório.
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # 2. Job de Build: Cria os executáveis para cada plataforma
  build:
    # Define um nome para o job
    name: Build para ${{ matrix.os }}
    
    # Estratégia de Matriz: Executa o mesmo job em diferentes sistemas operacionais
    strategy:
      matrix:
        os: [windows-latest, macos-latest] # Roda em Windows e macOS

    # Define o sistema operacional da máquina virtual
    runs-on: ${{ matrix.os }}

    steps:
      # Passo 1: Clona o código do seu repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Python
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Você pode ajustar a versão do Python

      # Passo 3: Instala as dependências do projeto
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Passo 4: Executa o PyInstaller para criar o binário
      - name: Criar executável com PyInstaller
        run: pyinstaller --name="DownloaderNFe" --onefile --windowed --clean src/testeUnificado.py

      # Passo 5 (Apenas para macOS): Compacta o .app em um .zip
      - name: Compactar o .app (apenas macOS)
        if: matrix.os == 'macos-latest'
        run: zip -r DownloaderNFe-macOS.zip dist/DownloaderNFe.app

      # Passo 6: Faz o upload do artefato de build para ser usado no job de release
      - name: Upload do artefato de build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build # Nome do artefato (ex: windows-latest-build)
          path: |
            dist/DownloaderNFe.exe
            DownloaderNFe-macOS.zip
          if-no-files-found: error # Falha se o arquivo não for encontrado
          
  # 3. Job de Release: Cria a release no GitHub e anexa os executáveis
  create-release:
    # Define um nome para o job
    name: Criar Release
    
    # Dependência: Este job só roda após o job 'build' ter sido concluído com sucesso para todas as plataformas
    needs: build

    # Roda em uma máquina Ubuntu (é leve e rápido para esta tarefa)
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Baixa todos os artefatos que foram criados no job 'build'
      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Salva todos os artefatos na pasta 'artifacts'

      # Passo 2: Cria a Release no GitHub
      - name: Criar Release e anexar binários
        uses: softprops/action-gh-release@v2
        with:
          # Usa o nome da tag como nome da release
          name: Release ${{ github.ref_name }}
          # Pega as notas da release do corpo da tag (opcional, mas recomendado)
          body_path: CHANGELOG.md
          # Anexa os arquivos baixados à release
          files: |
            artifacts/windows-latest-build/DownloaderNFe.exe
            artifacts/macos-latest-build/DownloaderNFe-macOS.zip
